<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.slipper.service.modules.enterprise.dao.EnterpriseMenuDao">

<!--    List<String> queryPermissionByEnterpriseId(@Param("id") Long id);-->
    <select id="queryPermissionByEnterpriseId" resultType="String">
        SELECT DISTINCT m.permission
        FROM enterprise__menu AS em
             LEFT JOIN menu AS m
                   ON m.id = em.menu_id
        WHERE em.enterprise_id = #{id}
          AND em.deleted = 0
          AND m.deleted = 0
    </select>

<!--    List<EnterpriseMenuDto> queryCompleteEnterpriseMenuByEnterpriseId(@Param("id") Long id);-->
    <select id="queryCompleteEnterpriseMenuByEnterpriseId" resultType="com.slipper.service.modules.enterprise.model.dto.EnterpriseMenuTreeDTO">
        SELECT em.id, em.menu_id, em.enterprise_id, em.sort As em_sort,
               m.path, m.name, m.url, m.permission, m.type, m.show, m.tab, m.multiple, m.keepalive, m.parent_id, m.sort AS m_sort,
            CASE WHEN em.name_cn IS NOT NULL AND em.name_cn != ''
                THEN em.name_cn
                ELSE m.name_cn END AS name_cn,
            CASE WHEN em.name_en IS NOT NULL AND em.name_en != ''
                THEN em.name_en
                ELSE m.name_en END AS name_en,
            CASE WHEN em.icon IS NOT NULL AND em.icon != ''
                THEN em.icon
                ELSE m.icon END AS icon,
            CASE WHEN em.sort IS NOT NULL AND em.sort != ''
                THEN em.sort
                ELSE m.sort END AS sort
        FROM enterprise__menu AS em
            LEFT JOIN menu AS m
                ON m.id = em.menu_id
        WHERE em.enterprise_id = #{id}
            AND em.deleted = 0
            AND m.deleted = 0
        ORDER BY em_sort ASC, m_sort ASC
    </select>

<!--    List<String> queryPermissionByAdministratorId(@Param("id") Long id);-->
    <select id="queryPermissionByAdministratorId" resultType="String">
        SELECT DISTINCT m.permission
        FROM administrator__role AS ar
                 LEFT JOIN role AS r
                           ON r.id = ar.role_id
                 LEFT JOIN role__menu AS rm
                           ON rm.role_id = ar.role_id
                 LEFT JOIN enterprise__menu AS em
                           ON em.id = rm.enterprise_menu_id
                 LEFT JOIN menu AS m
                           ON m.id = em.menu_id
        WHERE ar.administrator_id = #{id}
          AND r.deleted = 0
          AND m.deleted = 0
          AND em.deleted = 0
    </select>

<!--    List<EnterpriseMenuTreeDto> queryCompleteEnterpriseMenuByAdministratorId(@Param("id") Long id);-->
    <select id="queryCompleteEnterpriseMenuByAdministratorId" resultType="com.slipper.service.modules.enterprise.model.dto.EnterpriseMenuTreeDTO">
        SELECT DISTINCT em.id, em.menu_id, em.enterprise_id, em.sort As em_sort,
               m.path, m.name, m.url, m.permission, m.type, m.show, m.tab, m.multiple, m.keepalive, m.parent_id, m.sort AS m_sort,
               CASE WHEN em.name_cn IS NOT NULL AND em.name_cn != ''
                THEN em.name_cn
                    ELSE m.name_cn END AS name_cn,
               CASE WHEN em.name_en IS NOT NULL AND em.name_en != ''
                THEN em.name_en
                    ELSE m.name_en END AS name_en,
               CASE WHEN em.icon IS NOT NULL AND em.icon != ''
                THEN em.icon
                    ELSE m.icon END AS icon,
               CASE WHEN em.sort IS NOT NULL AND em.sort != ''
                THEN em.sort
                    ELSE m.sort END AS sort
        FROM administrator__role AS ar
            LEFT JOIN role AS r
                ON r.id = ar.role_id
            LEFT JOIN role__menu AS rm
                ON rm.role_id = ar.role_id
            LEFT JOIN enterprise__menu AS em
                ON em.id = rm.enterprise_menu_id
            LEFT JOIN menu AS m
                ON m.id = em.menu_id
        WHERE ar.administrator_id = #{id}
          AND r.deleted = 0
          AND em.deleted = 0
          AND m.deleted = 0
        ORDER BY em_sort ASC, m_sort ASC
    </select>

<!--    List<EnterpriseMenuTreeVO> queryEnterpriseMenuByEnterpriseId(@Param("id") Long id);-->
    <select id="queryEnterpriseMenuByEnterpriseId" resultType="com.slipper.service.modules.enterprise.model.vo.EnterpriseMenuTreeVO">
        SELECT em.id, em.menu_id, em.enterprise_id, em.updated_at, em.sort As em_sort, m.type, m.parent_id, m.sort AS m_sort,
               CASE WHEN em.name_cn IS NOT NULL AND em.name_cn != ''
                THEN em.name_cn
                    ELSE m.name_cn END AS name_cn,
               CASE WHEN em.name_en IS NOT NULL AND em.name_en != ''
                THEN em.name_en
                    ELSE m.name_en END AS name_en,
               CASE WHEN em.icon IS NOT NULL AND em.icon != ''
                THEN em.icon
                    ELSE m.icon END AS icon,
               CASE WHEN em.sort IS NOT NULL AND em.sort != ''
                THEN em.sort
                    ELSE m.sort END AS sort
        FROM enterprise__menu AS em
            LEFT JOIN menu AS m
                ON m.id = em.menu_id
        WHERE em.enterprise_id = #{id}
          AND em.deleted = 0
          AND m.deleted = 0
        ORDER BY em_sort ASC, m_sort ASC
    </select>

<!--    List<EnterpriseMenuSimplifyVO> queryListByEnterpriseId(Long enterpriseId);-->
    <select id="queryListByEnterpriseId" resultType="com.slipper.service.modules.enterprise.model.vo.EnterpriseMenuSimplifyTreeVO">
        SELECT em.id, em.menu_id, em.sort As em_sort, m.parent_id, m.sort AS m_sort,
               CASE WHEN em.name_cn IS NOT NULL AND em.name_cn != ''
                THEN em.name_cn
                    ELSE m.name_cn END AS name_cn,
               CASE WHEN em.name_en IS NOT NULL AND em.name_en != ''
                THEN em.name_en
                    ELSE m.name_en END AS name_en
        FROM enterprise__menu AS em
            LEFT JOIN menu AS m
                ON m.id = em.menu_id
        WHERE em.enterprise_id = #{enterpriseId}
          AND em.deleted = 0
          AND m.deleted = 0
        ORDER BY em_sort ASC, m_sort ASC
    </select>

<!--    List<EnterpriseMenuSimplifyVO> queryListByRoleId(List<Long> roleIds);-->
    <select id="queryListByRoleId" resultType="com.slipper.service.modules.enterprise.model.vo.EnterpriseMenuSimplifyTreeVO">
        SELECT DISTINCT em.id, em.menu_id, em.sort As em_sort, m.parent_id, m.sort AS m_sort,
               CASE WHEN em.name_cn IS NOT NULL AND em.name_cn != ''
                THEN em.name_cn
                    ELSE m.name_cn END AS name_cn,
               CASE WHEN em.name_en IS NOT NULL AND em.name_en != ''
                THEN em.name_en
                    ELSE m.name_en END AS name_en
        FROM enterprise__menu AS em
            LEFT JOIN menu AS m
                ON m.id = em.menu_id
            LEFT JOIN role__menu AS rm
                ON rm.enterprise_menu_id = em.id
        WHERE rm.role_id IN
                <foreach item="item" collection="roleIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
          AND em.deleted = 0
          AND m.deleted = 0
        ORDER BY em_sort ASC, m_sort ASC
    </select>

<!--    List<Long> queryMenuIdByEnterpriseId(@Param("enterpriseId") Long enterpriseId);-->
    <select id="queryMenuIdByEnterpriseId" resultType="Long">
        SELECT menu_id
        FROM enterprise__menu
        WHERE deleted = 0 and enterprise_id = #{enterpriseId}
    </select>

<!--    void createBatch(-->
<!--    @Param("enterpriseId") Long enterpriseId,-->
<!--    @Param("menuIds") List<Long> menuIds,-->
<!--    @Param("administratorId") Long administratorId,-->
<!--    @Param("createdAt") Date createdAt-->
<!--    );-->
    <insert id="createBatch">
        INSERT INTO enterprise__menu
        (enterprise_id, menu_id, creator, created_at)
        VALUES
        <foreach collection="menuIds" item="item" index="index" separator=",">
            (#{enterpriseId}, #{item}, #{administratorId}, #{createdAt})
        </foreach>
    </insert>

</mapper>
